//
//  CoreDataManager.swift
//  Persistence
//
//  Created by –ì–ª–µ–± –•–∞–º–∏–Ω on 04.04.2025.
//

import CoreData
import Core

protocol CoreDataManagerProtocol {
    func fetch<T: NSManagedObject>(predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor]?) -> [T]
    func save<T: NSManagedObject>(_ block: (T, NSManagedObjectContext) -> Void)
    func delete<T: NSManagedObject>(_ object: T)
}

final class CoreDataManager {
    private let persistentContainer: NSPersistentContainer
    private var context: NSManagedObjectContext { persistentContainer.viewContext }

    init() {
        guard let modelURL = Bundle(for: CoreDataManager.self).url(forResource: "SpendWise", withExtension: "momd"),
              let model = NSManagedObjectModel(contentsOf: modelURL) else {
            Logger.shared.log(.error, message: "‚ùå üíæ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å CoreData SpendWise")
            fatalError("‚ùå üíæ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å CoreData SpendWise")
        }
        persistentContainer = NSPersistentContainer(name: "SpendWise", managedObjectModel: model)

        let semaphore = DispatchSemaphore(value: 0)
        
        persistentContainer.loadPersistentStores { _, error in
            if let error = error {
                Logger.shared.log(.error, message: "‚ùå üíæ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Core Data: \(error.localizedDescription)")
                fatalError("‚ùå üíæ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Core Data: \(error.localizedDescription)")
            }
            semaphore.signal()
        }

        semaphore.wait()
        Logger.shared.log(.info, message: "‚úÖ üíæ Core Data –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    }

    private func saveContext(_ context: NSManagedObjectContext) {
        guard context.hasChanges else {
            Logger.shared.log(.info, message: "üü° üíæ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º context Core Data ")
            return
        }

        do {
            try context.save()
            Logger.shared.log(.info, message: "‚úÖ üíæ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Core Data ")
        } catch {
            Logger.shared.log(.error, message: "‚ùå üíæ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Core Data: \(error.localizedDescription)")
        }
    }
}

extension CoreDataManager: CoreDataManagerProtocol {
    func fetch<T: NSManagedObject>(predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor]?) -> [T] {
        let request = T.fetchRequest()
        request.predicate = predicate
        request.sortDescriptors = sortDescriptors == [] ? nil : sortDescriptors

        do {
            let result = try context.fetch(request) as? [T]
            Logger.shared.log(.info, message: "‚úÖ üíæ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤ CoreData –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return result ?? []
        } catch {
            Logger.shared.log(.error, message: "‚ùå üíæ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Core Data: \(error.localizedDescription)")
            return []
        }
    }

    func save<T: NSManagedObject>(_ block: (T, NSManagedObjectContext) -> Void) {
        let entityName = String(describing: T.self)

        guard let entity = NSEntityDescription.entity(forEntityName: entityName, in: context),
              let object = NSManagedObject(entity: entity, insertInto: context) as? T else {
            Logger.shared.log(.error, message: "‚ùå üíæ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ \(entityName)")
            return
        }

        block(object, context)
        saveContext(context)
    }

    func delete<T: NSManagedObject>(_ object: T) {
        context.delete(object)
        saveContext(context)
        Logger.shared.log(.info, message: "‚úÖ üóëÔ∏è üíæ –û–±—ä–µ–∫—Ç \(T.self) —É–¥–∞–ª—ë–Ω")
    }
}
